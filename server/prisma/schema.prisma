// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      String   @default("user") // user, admin
  aiEnabled Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User preferences
  preferences UserPreferences?

  // Owned content
  projects     Project[]
  generalNotes GeneralNote[]

  // Collaboration
  projectCollaborators ProjectCollaborator[]
  comments             Comment[]

  // AI usage tracking
  aiUsageRecords AIUsageRecord[]
  aiAuditLogs    AIAuditLog[]

  // Template Marketplace relationships
  marketplaceTemplates    MarketplaceTemplate[]
  templateReviews         TemplateReview[]
  templatePurchases       TemplatePurchase[]
  templateDownloads       TemplateDownload[]
  templateLikes           TemplateLike[]
  templateReports         TemplateReport[]
  creatorProfile          CreatorProfile?
  templateCollections     TemplateCollection[]
  collectionLikes         CollectionLike[]
  templateSubmissions     TemplateSubmission[]
  templateSubmissionsReviewed TemplateSubmission[] @relation("TemplateReviewer")
  creatorRevenues         CreatorRevenue[]
  challengeSubmissions    ChallengeSubmission[]
  
  // Phase 2D: Professional Publishing relationships
  publishingProjects      PublishingProject[]
  authorPlatform          AuthorPlatform?

  @@map("users")
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  theme              String  @default("light") // light, dark, auto
  editorFontSize     Int     @default(14)
  editorFontFamily   String  @default("Inter")
  autoSave           Boolean @default(true)
  autoSaveInterval   Int     @default(30) // seconds
  showWordCount      Boolean @default(true)
  showCharacterCount Boolean @default(false)
  distrationFreeMode Boolean @default(false)
  keyboardShortcuts  String @default("{}")

  @@map("user_preferences")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  color       String   @default("#3B82F6") // Hex color for project identification
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Project content
  stories     Story[]
  notes       ProjectNote[]
  characters  Character[]
  locations   Location[]
  items       Item[]
  plotThreads PlotThread[]
  themes      Theme[]
  timelines   Timeline[]

  // Collaboration
  collaborators ProjectCollaborator[]

  // Codex system relations
  codexEntities      CodexEntity[]
  codexTimelineEvents CodexTimelineEvent[]
  codexTags          CodexTag[]
  entityCollections  EntityCollection[]
  consistencyChecks  ConsistencyCheck[]
  
  // Phase 2D: Professional Publishing relationships
  publishingProjects PublishingProject[]

  @@map("projects")
}

model ProjectCollaborator {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String   @default("viewer") // owner, editor, viewer
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
  @@map("project_collaborators")
}

model Story {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("planning") // planning, drafting, revising, completed
  wordCount   Int      @default(0)
  targetWords Int?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Story content
  scenes    Scene[]
  notes     StoryNote[]
  chapters  Chapter[]
  acts      Act[]
  timelines Timeline[]

  @@map("stories")
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  order     Int
  wordCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  scenes Scene[]

  @@map("chapters")
}

model Act {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  scenes Scene[]

  @@map("acts")
}

model Scene {
  id          String   @id @default(cuid())
  title       String
  content     String   @default("")
  summary     String?
  wordCount   Int      @default(0)
  order       Int      @default(0)
  status      String   @default("draft") // outline, draft, revision, complete
  povCharacter String? // Character ID or name
  location    String?  // Location ID or name
  timeOfDay   String?
  date        DateTime?
  tags        String @default("[]")
  color       String?  // For visual organization
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
  actId     String?
  act       Act?     @relation(fields: [actId], references: [id])

  // Relationships
  characters      SceneCharacter[]
  dependencies    SceneDependency[] @relation("SceneDependencies")
  dependents      SceneDependency[] @relation("SceneDependents")
  timelineEntries TimelineEntry[]
  links           Link[]            @relation("SceneLinks")
  comments        Comment[]

  @@map("scenes")
}

model SceneCharacter {
  id        String @id @default(cuid())
  sceneId   String
  scene     Scene  @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  characterId String
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  role      String @default("present") // present, mentioned, pov

  @@unique([sceneId, characterId])
  @@map("scene_characters")
}

model SceneDependency {
  id            String @id @default(cuid())
  sceneId       String
  scene         Scene  @relation("SceneDependencies", fields: [sceneId], references: [id], onDelete: Cascade)
  dependentSceneId String
  dependentScene   Scene  @relation("SceneDependents", fields: [dependentSceneId], references: [id], onDelete: Cascade)
  type          String @default("follows") // follows, requires, blocks
  description   String?

  @@unique([sceneId, dependentSceneId])
  @@map("scene_dependencies")
}

// Notes system
model GeneralNote {
  id        String   @id @default(cuid())
  title     String
  content   String   @default("")
  type      String   @default("general") // general, research, idea, reference
  tags      String @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  links    Link[]    @relation("GeneralNoteLinks")
  comments Comment[]

  @@map("general_notes")
}

model ProjectNote {
  id        String   @id @default(cuid())
  title     String
  content   String   @default("")
  type      String   @default("general") // general, worldbuilding, series_bible, research
  tags      String @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  links    Link[]    @relation("ProjectNoteLinks")
  comments Comment[]

  @@map("project_notes")
}

model StoryNote {
  id        String   @id @default(cuid())
  title     String
  content   String   @default("")
  type      String   @default("general") // general, plot, character, research
  tags      String @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  links    Link[]    @relation("StoryNoteLinks")
  comments Comment[]

  @@map("story_notes")
}

// Entity types for rich world-building
model Character {
  id          String   @id @default(cuid())
  name        String
  description String   @default("")
  avatar      String?
  traits      String @default("{}") // Physical, personality, background
  arc         String @default("{}") // Character development arc
  relationships String @default("{}") // Relationships with other characters
  backstory   String   @default("")
  motivation  String   @default("")
  conflict    String   @default("")
  tags        String @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  scenes           SceneCharacter[]
  timelineEntries  TimelineEntry[]
  links            Link[]           @relation("CharacterLinks")
  comments         Comment[]

  @@map("characters")
}

model Location {
  id          String   @id @default(cuid())
  name        String
  description String   @default("")
  type        String   @default("place") // place, region, building, room
  parent      String? // Parent location ID for hierarchy
  coordinates String?    @default("{}") // Map coordinates if applicable
  significance String  @default("")
  atmosphere  String   @default("")
  tags        String @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  timelineEntries TimelineEntry[]
  links           Link[]          @relation("LocationLinks")
  comments        Comment[]

  @@map("locations")
}

model Item {
  id           String   @id @default(cuid())
  name         String
  description  String   @default("")
  type         String   @default("object") // object, weapon, artifact, document
  properties   String @default("{}") // Physical properties, magical properties, etc.
  history      String   @default("")
  currentHolder String? // Character ID or location
  significance String   @default("")
  tags         String @default("[]")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  timelineEntries TimelineEntry[]
  links           Link[]          @relation("ItemLinks")
  comments        Comment[]

  @@map("items")
}

model PlotThread {
  id          String   @id @default(cuid())
  name        String
  description String   @default("")
  status      String   @default("active") // active, resolved, abandoned
  priority    String   @default("medium") // high, medium, low
  resolution  String   @default("")
  tags        String @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  timelineEntries TimelineEntry[]
  links           Link[]          @relation("PlotThreadLinks")
  comments        Comment[]

  @@map("plot_threads")
}

model Theme {
  id          String   @id @default(cuid())
  name        String
  description String   @default("")
  occurrences String @default("{}") // Array of scene IDs where theme appears
  analysis    String   @default("")
  tags        String @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  links    Link[]    @relation("ThemeLinks")
  comments Comment[]

  @@map("themes")
}

// Timeline system
model Timeline {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("story") // story, character, world, narrative
  startDate   DateTime?
  endDate     DateTime?
  scale       String   @default("days") // minutes, hours, days, months, years
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  storyId   String?
  story     Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)

  entries TimelineEntry[]

  @@map("timelines")
}

model TimelineEntry {
  id          String    @id @default(cuid())
  title       String
  description String?
  date        DateTime
  endDate     DateTime? // For events with duration
  type        String    @default("event") // event, scene, milestone, deadline
  importance  Int       @default(1) // 1-5 scale
  tags        String @default("[]")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  timelineId String
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)

  // Optional connections to other entities
  sceneId     String?
  scene       Scene?     @relation(fields: [sceneId], references: [id])
  characterId String?
  character   Character? @relation(fields: [characterId], references: [id])
  locationId  String?
  location    Location?  @relation(fields: [locationId], references: [id])
  itemId      String?
  item        Item?      @relation(fields: [itemId], references: [id])
  plotThreadId String?
  plotThread  PlotThread? @relation(fields: [plotThreadId], references: [id])

  @@map("timeline_entries")
}

// Linking system
model Link {
  id          String   @id @default(cuid())
  sourceType  String   // Type of source entity
  sourceId    String   // ID of source entity
  targetType  String   // Type of target entity
  targetId    String   // ID of target entity
  linkText    String   // The text used in the link
  contextBefore String @default("") // Text before the link for context
  contextAfter  String @default("") // Text after the link for context
  createdAt   DateTime @default(now())

  // Relations to different entity types (nullable)
  sourceScene        Scene?        @relation("SceneLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceGeneralNote  GeneralNote?  @relation("GeneralNoteLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceProjectNote  ProjectNote?  @relation("ProjectNoteLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceStoryNote    StoryNote?    @relation("StoryNoteLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceCharacter    Character?    @relation("CharacterLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceLocation     Location?     @relation("LocationLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceItem         Item?         @relation("ItemLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourcePlotThread   PlotThread?   @relation("PlotThreadLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceTheme        Theme?        @relation("ThemeLinks", fields: [sourceId], references: [id], onDelete: Cascade)

  @@unique([sourceType, sourceId, targetType, targetId, linkText])
  @@map("links")
}

// Comments and collaboration
model Comment {
  id        String   @id @default(cuid())
  content   String
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Polymorphic relations to different entity types
  entityType String
  entityId   String

  scene         Scene?        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  generalNote   GeneralNote?  @relation(fields: [entityId], references: [id], onDelete: Cascade)
  projectNote   ProjectNote?  @relation(fields: [entityId], references: [id], onDelete: Cascade)
  storyNote     StoryNote?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  character     Character?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  location      Location?     @relation(fields: [entityId], references: [id], onDelete: Cascade)
  item          Item?         @relation(fields: [entityId], references: [id], onDelete: Cascade)
  plotThread    PlotThread?   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  theme         Theme?        @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Version control for all content
model Version {
  id          String   @id @default(cuid())
  entityType  String   // Type of entity being versioned
  entityId    String   // ID of the entity
  content     String     // Snapshot of the entity at this version
  changeType  String   @default("update") // create, update, delete
  description String?  // Optional description of changes
  createdAt   DateTime @default(now())
  userId      String   // User who made the change

  @@map("versions")
}

// CODEX SYSTEM - Advanced Entity Management and Relationships

// Universal Codex Entity (polymorphic design for all entity types)
model CodexEntity {
  id          String   @id @default(cuid())
  type        String   // 'character', 'location', 'object', 'lore', 'subplot', 'organization', 'event', 'concept'
  name        String
  description String   @default("")
  data        String   @default("{}") // JSON blob for type-specific fields
  tags        String   @default("[]") // JSON array of tags
  category    String?  // Primary category
  subcategory String?  // Secondary category
  importance  Int      @default(3) // 1-5 scale (5 = most important)
  
  // Metadata
  avatar      String?  // Image/icon URL
  color       String?  // Hex color for visual identification
  notes       String   @default("") // Additional notes
  isUniversal Boolean  @default(false) // True for cross-project entities
  
  // Tracking
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  projectId   String?  // null for universal entities
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Entity connections
  relationshipsFrom EntityRelationship[] @relation("FromEntity")
  relationshipsTo   EntityRelationship[] @relation("ToEntity")
  
  // Text references and mentions
  textReferences    TextReference[]
  mentionSuggestions MentionSuggestion[]
  
  // Timeline participation
  timelineEvents    CodexTimelineEvent[]
  
  @@index([type, projectId])
  @@index([name, projectId])
  @@index([isUniversal])
  @@map("codex_entities")
}

// Entity Relationships and Connections
model EntityRelationship {
  id          String   @id @default(cuid())
  fromEntityId String
  fromEntity   CodexEntity @relation("FromEntity", fields: [fromEntityId], references: [id], onDelete: Cascade)
  toEntityId   String
  toEntity     CodexEntity @relation("ToEntity", fields: [toEntityId], references: [id], onDelete: Cascade)
  
  type        String   // 'family', 'organization', 'location', 'conflict', 'alliance', 'owns', 'member_of', 'located_in'
  description String?  // Description of the relationship
  strength    Int      @default(5) // 1-10 relationship importance/strength
  
  // Relationship details
  isDirectional Boolean @default(true) // False for bidirectional relationships
  startDate     DateTime? // When relationship began
  endDate       DateTime? // When relationship ended (if applicable)
  status        String   @default("active") // active, ended, complicated
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([fromEntityId, toEntityId, type])
  @@map("entity_relationships")
}

// Text Reference Detection and Auto-Highlighting
model TextReference {
  id          String   @id @default(cuid())
  entityId    String
  entity      CodexEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Source location
  sourceType  String   // 'scene', 'note', 'story', etc.
  sourceId    String   // ID of the source document
  
  // Text position and context
  text        String   // The actual text that references the entity
  startPos    Int      // Character position where reference starts
  endPos      Int      // Character position where reference ends
  contextBefore String @default("") // 50 chars before for context
  contextAfter  String @default("") // 50 chars after for context
  
  // Detection metadata
  confidence  Float    @default(1.0) // 0.0-1.0 confidence score
  isConfirmed Boolean  @default(false) // User has confirmed this reference
  isIgnored   Boolean  @default(false) // User has marked to ignore
  
  createdAt   DateTime @default(now())
  
  @@index([sourceType, sourceId])
  @@index([entityId, sourceType])
  @@map("text_references")
}

// Auto-Detection Suggestions for New Entities
model MentionSuggestion {
  id          String   @id @default(cuid())
  text        String   // The suggested entity name/text
  sourceType  String   // Where this was found
  sourceId    String   // Source document ID
  
  // Context
  context     String   // Surrounding text for context
  frequency   Int      @default(1) // How many times this appears
  
  // Suggestion metadata
  suggestedType String? // Suggested entity type (character, location, etc.)
  confidence    Float   @default(0.5) // 0.0-1.0 confidence this should be an entity
  
  // State
  status      String   @default("pending") // pending, accepted, rejected, ignored
  
  // If accepted, link to created entity
  entityId    String?
  entity      CodexEntity? @relation(fields: [entityId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now())
  
  @@index([status, confidence])
  @@index([text, sourceType])
  @@map("mention_suggestions")
}

// Enhanced Timeline for Codex Events
model CodexTimelineEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  endDate     DateTime? // For events with duration
  
  // Event classification
  type        String   @default("event") // event, milestone, meeting, conflict, discovery
  importance  Int      @default(3) // 1-5 scale
  
  // Connections
  entityId    String?
  entity      CodexEntity? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Timeline grouping
  timelineGroup String? // Group related events together
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([date, projectId])
  @@index([entityId, type])
  @@map("codex_timeline_events")
}

// Codex Search and Organization
model CodexTag {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  // Hex color for visual organization
  category    String?  // Tag category/grouping
  
  projectId   String?  // null for universal tags
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  usageCount  Int      @default(0) // How many entities use this tag
  
  createdAt   DateTime @default(now())
  
  @@unique([name, projectId])
  @@map("codex_tags")
}

// Entity Collections and Smart Groups
model EntityCollection {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("manual") // manual, smart, auto
  
  // Smart collection criteria (JSON)
  criteria    String   @default("{}") // Query criteria for auto-collections
  
  // Collection metadata
  color       String?
  icon        String?
  isPublic    Boolean  @default(false) // Shareable collections
  
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Collection members
  members     EntityCollectionMember[]
  
  @@map("entity_collections")
}

model EntityCollectionMember {
  id           String   @id @default(cuid())
  collectionId String
  collection   EntityCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  entityId     String
  
  order        Int      @default(0) // Manual ordering within collection
  addedAt      DateTime @default(now())
  
  @@unique([collectionId, entityId])
  @@map("entity_collection_members")
}

// Consistency Tracking and Validation
model ConsistencyCheck {
  id          String   @id @default(cuid())
  entityId    String   // Entity being checked
  type        String   // Type of consistency check
  description String   // What inconsistency was found
  severity    String   @default("medium") // low, medium, high, critical
  
  // Check details
  conflictingData String @default("{}") // JSON data about the conflict
  suggestions     String @default("[]") // JSON array of suggestions to fix
  
  // Resolution
  status      String   @default("open") // open, resolved, ignored
  resolvedAt  DateTime?
  resolution  String?  // How it was resolved
  
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([entityId, status])
  @@index([projectId, severity])
  @@map("consistency_checks")
}

// AI SYSTEM - Usage tracking, audit logs, and service management

// AI Usage Tracking
model AIUsageRecord {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId        String?
  provider         String   // openai, anthropic, google, local
  model            String   // gpt-4, claude-3, etc.
  promptTokens     Int      @default(0)
  completionTokens Int      @default(0)
  totalTokens      Int      @default(0)
  cost             Float    @default(0.0)
  requestType      String   // generate, analyze, workshop, extract
  timestamp        DateTime @default(now())
  success          Boolean
  errorMessage     String?

  @@index([userId, timestamp])
  @@index([provider, timestamp])
  @@map("ai_usage_records")
}

// AI Audit Logs for Security and Compliance
model AIAuditLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      String   // generate, analyze, extract, workshop
  provider    String
  model       String
  promptHash  String   // Hashed prompt for privacy
  tokensUsed  Int
  cost        Float
  success     Boolean
  timestamp   DateTime @default(now())
  ipAddress   String
  userAgent   String

  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@map("ai_audit_logs")
}

// AI Workshop Sessions
model AIWorkshopSession {
  id          String   @id @default(cuid())
  title       String
  description String?
  userId      String
  projectId   String?
  storyId     String?
  sceneId     String?
  settings    String   @default("{}") // JSON settings
  context     String   @default("{}") // JSON context
  archived    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  messages AIWorkshopMessage[]

  @@index([userId, archived])
  @@index([projectId, archived])
  @@map("ai_workshop_sessions")
}

// AI Workshop Messages
model AIWorkshopMessage {
  id        String   @id @default(cuid())
  sessionId String
  session   AIWorkshopSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  role      String   // user, assistant, system
  content   String
  metadata  String   @default("{}") // JSON metadata
  timestamp DateTime @default(now())

  @@index([sessionId, timestamp])
  @@map("ai_workshop_messages")
}

// AI Prompt Templates
model AIPromptTemplate {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // writing_assistance, character_development, etc.
  tags        String   @default("[]") // JSON array
  prompt      String
  systemPrompt String?
  variables   String   @default("[]") // JSON array of variables
  aiSettings  String   @default("{}") // JSON AI settings
  examples    String   @default("[]") // JSON array of examples
  metadata    String   @default("{}") // JSON metadata
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Float    @default(0.0)
  usageCount  Int      @default(0)
  isFavorite  Boolean  @default(false)
  isPublic    Boolean  @default(false)

  executions AIPromptExecution[]

  @@index([category, isPublic])
  @@index([createdBy, isPublic])
  @@map("ai_prompt_templates")
}

// AI Prompt Executions
model AIPromptExecution {
  id         String   @id @default(cuid())
  templateId String
  template   AIPromptTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId     String
  variables  String   @default("{}") // JSON variables used
  output     String
  usage      String   @default("{}") // JSON usage stats
  timestamp  DateTime @default(now())

  @@index([templateId, timestamp])
  @@index([userId, timestamp])
  @@map("ai_prompt_executions")
}

// AI Recipe Workflows
model AIRecipe {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // story_development, character_creation, etc.
  tags        String   @default("[]") // JSON array
  steps       String   @default("[]") // JSON array of steps
  variables   String   @default("[]") // JSON array of variables
  metadata    String   @default("{}") // JSON metadata
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Float    @default(0.0)
  usageCount  Int      @default(0)
  isFavorite  Boolean  @default(false)
  isPublic    Boolean  @default(false)

  executions AIRecipeExecution[]

  @@index([category, isPublic])
  @@index([createdBy, isPublic])
  @@map("ai_recipes")
}

// AI Recipe Executions
model AIRecipeExecution {
  id        String   @id @default(cuid())
  recipeId  String
  recipe    AIRecipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  userId    String
  input     String   @default("{}") // JSON input variables
  output    String   @default("{}") // JSON output
  status    String   @default("pending") // pending, running, completed, failed
  steps     String   @default("[]") // JSON array of step results
  startTime DateTime @default(now())
  endTime   DateTime?
  error     String?

  @@index([recipeId, startTime])
  @@index([userId, startTime])
  @@map("ai_recipe_executions")
}

// AI Content Analysis
model AIContentAnalysis {
  id           String   @id @default(cuid())
  userId       String
  projectId    String?
  text         String
  wordCount    Int
  characterCount Int
  qualityScore Float
  findings     String   @default("[]") // JSON array of findings
  suggestions  String   @default("[]") // JSON array of suggestions
  entities     String   @default("[]") // JSON array of detected entities
  styleMetrics String   @default("{}") // JSON style analysis
  usage        String   @default("{}") // JSON usage stats
  timestamp    DateTime @default(now())

  @@index([userId, timestamp])
  @@index([projectId, timestamp])
  @@map("ai_content_analysis")
}

// AI-ism Detection Results
model AIDetection {
  id              String   @id @default(cuid())
  userId          String
  text            String
  humanLikelihood Float    // 0-1 score
  aiScore         Float    // 0-1 score
  patterns        String   @default("[]") // JSON array of detected patterns
  suggestions     String   @default("[]") // JSON array of suggestions
  summary         String
  usage           String   @default("{}") // JSON usage stats
  timestamp       DateTime @default(now())

  @@index([userId, timestamp])
  @@map("ai_detections")
}

// TEMPLATE MARKETPLACE SYSTEM - Phase 2B Implementation

// Template Marketplace Core Models
model MarketplaceTemplate {
  id          String   @id @default(cuid())
  title       String
  description String
  author      String?  // Display name for creator
  authorId    String   // Creator's user ID
  creator     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Template Content
  templateData String   // JSON blob of complete template structure
  sections     String   @default("[]") // JSON array of template sections
  metadata     String   @default("{}") // JSON metadata (character arcs, plot threads, etc.)
  
  // Classification
  genre        String   @default("[]") // JSON array of genres
  subgenre     String   @default("[]") // JSON array of subgenres
  category     String   // novel, screenplay, non-fiction, world-building, character, marketing
  structure    String   // three-act, hero-journey, etc.
  difficulty   String   @default("beginner") // beginner, intermediate, advanced
  tags         String   @default("[]") // JSON array of tags
  
  // Target Specifications
  targetWordCount     Int      @default(0)
  estimatedDuration   String?  // "3-6 months"
  targetAudience      String   @default("general") // young-adult, adult, literary, commercial
  writingLevel        String   @default("amateur") // amateur, professional, expert
  
  // Marketplace Details
  licenseType         String   @default("free") // free, premium, exclusive
  price               Float    @default(0.0) // Price in USD
  isPublic            Boolean  @default(false)
  isFeatured          Boolean  @default(false)
  isVerified          Boolean  @default(false) // Verified by editorial team
  
  // Version Control
  version             String   @default("1.0.0")
  changeLog          String   @default("[]") // JSON array of version changes
  parentVersionId    String?  // Previous version if this is an update
  
  // Statistics
  downloadCount      Int      @default(0)
  purchaseCount      Int      @default(0)
  viewCount          Int      @default(0)
  likeCount          Int      @default(0)
  averageRating      Float    @default(0.0)
  reviewCount        Int      @default(0)
  
  // Preview and Media
  previewContent     String?  // Sample content for preview
  coverImage         String?  // Cover image URL
  screenshots        String   @default("[]") // JSON array of screenshot URLs
  
  // Publishing
  publishedAt        DateTime?
  lastUpdated        DateTime @updatedAt
  createdAt          DateTime @default(now())
  
  // Template Processing
  processingStatus   String   @default("draft") // draft, reviewing, approved, rejected, published
  moderationNotes    String?  // Internal moderation notes
  
  // Relationships
  reviews            TemplateReview[]
  purchases          TemplatePurchase[]
  downloads          TemplateDownload[]
  likes              TemplateLike[]
  reports            TemplateReport[]
  collections        TemplateCollectionItem[]
  challengeSubmissions ChallengeSubmission[]
  analytics          TemplateAnalytics[]
  
  @@index([category, isPublic, publishedAt])
  @@index([authorId, publishedAt])
  @@index([averageRating, downloadCount])
  @@index([isFeatured, isPublic])
  @@map("marketplace_templates")
}

// Template Reviews and Ratings
model TemplateReview {
  id               String             @id @default(cuid())
  templateId       String
  template         MarketplaceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  reviewerId       String
  reviewer         User               @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  
  rating           Int                // 1-5 stars
  title            String?
  content          String
  
  // Review Details
  isVerifiedPurchase Boolean          @default(false)
  isRecommended      Boolean          @default(true)
  helpfulCount       Int              @default(0)
  reportCount        Int              @default(0)
  
  // Template Usage Feedback
  usageRating        Int?             // How well template worked for them (1-5)
  difficultyRating   Int?             // How difficult was it to use (1-5)
  valueRating        Int?             // Was it worth the price (1-5)
  
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  
  // Moderation
  isModerated      Boolean            @default(false)
  isHidden         Boolean            @default(false)
  
  @@unique([templateId, reviewerId])
  @@index([templateId, rating])
  @@index([reviewerId, createdAt])
  @@map("template_reviews")
}

// Template Purchases
model TemplatePurchase {
  id               String             @id @default(cuid())
  templateId       String
  template         MarketplaceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  purchaserId      String
  purchaser        User               @relation(fields: [purchaserId], references: [id], onDelete: Cascade)
  
  price            Float              // Price paid at time of purchase
  licenseType      String             // License purchased
  
  // Payment Details
  paymentMethod    String?            // stripe, paypal, etc.
  transactionId    String?            // External transaction ID
  paymentStatus    String             @default("completed") // pending, completed, refunded, failed
  
  // License Details
  licenseKey       String?            // Unique license key
  expiresAt        DateTime?          // For timed licenses
  usageLimit       Int?               // Number of projects can be used on
  
  purchasedAt      DateTime           @default(now())
  
  @@unique([templateId, purchaserId])
  @@index([purchaserId, purchasedAt])
  @@index([templateId, purchasedAt])
  @@map("template_purchases")
}

// Template Downloads (free templates)
model TemplateDownload {
  id          String             @id @default(cuid())
  templateId  String
  template    MarketplaceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  downloaderId String
  downloader  User               @relation(fields: [downloaderId], references: [id], onDelete: Cascade)
  
  downloadedAt DateTime          @default(now())
  ipAddress   String?
  userAgent   String?
  
  @@unique([templateId, downloaderId])
  @@index([downloaderId, downloadedAt])
  @@index([templateId, downloadedAt])
  @@map("template_downloads")
}

// Template Likes/Favorites
model TemplateLike {
  id          String             @id @default(cuid())
  templateId  String
  template    MarketplaceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  likedAt     DateTime          @default(now())
  
  @@unique([templateId, userId])
  @@index([userId, likedAt])
  @@index([templateId, likedAt])
  @@map("template_likes")
}

// Template Reporting
model TemplateReport {
  id          String             @id @default(cuid())
  templateId  String
  template    MarketplaceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  reporterId  String
  reporter    User               @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  
  reason      String             // inappropriate, copyright, quality, etc.
  description String
  status      String             @default("pending") // pending, investigating, resolved, dismissed
  
  reportedAt  DateTime          @default(now())
  resolvedAt  DateTime?
  resolution  String?
  
  @@index([templateId, status])
  @@index([reporterId, reportedAt])
  @@map("template_reports")
}

// Creator Profiles
model CreatorProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Profile Information
  displayName      String
  bio              String?
  avatar           String?
  website          String?
  socialLinks      String   @default("{}") // JSON object of social media links
  
  // Creator Stats
  totalTemplates   Int      @default(0)
  totalDownloads   Int      @default(0)
  totalRevenue     Float    @default(0.0)
  averageRating    Float    @default(0.0)
  followerCount    Int      @default(0)
  
  // Creator Status
  isVerified       Boolean  @default(false)
  isFeatured       Boolean  @default(false)
  tier             String   @default("bronze") // bronze, silver, gold, platinum
  
  // Creator Settings
  allowFollowers   Boolean  @default(true)
  publicProfile    Boolean  @default(true)
  showStats        Boolean  @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relationships
  followers        CreatorFollower[] @relation("FollowedCreator")
  following        CreatorFollower[] @relation("FollowerUser")
  
  @@map("creator_profiles")
}

// Creator Following System
model CreatorFollower {
  id          String        @id @default(cuid())
  creatorId   String
  creator     CreatorProfile @relation("FollowedCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  followerId  String
  follower    CreatorProfile @relation("FollowerUser", fields: [followerId], references: [id], onDelete: Cascade)
  
  followedAt  DateTime      @default(now())
  
  @@unique([creatorId, followerId])
  @@index([creatorId, followedAt])
  @@index([followerId, followedAt])
  @@map("creator_followers")
}

// Template Collections (curated sets)
model TemplateCollection {
  id          String   @id @default(cuid())
  title       String
  description String?
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  // Collection Details
  type        String   @default("user") // user, editorial, featured, genre
  isPublic    Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  
  // Collection Metadata
  coverImage  String?
  tags        String   @default("[]") // JSON array
  category    String?  // Genre or theme category
  
  // Stats
  itemCount   Int      @default(0)
  likeCount   Int      @default(0)
  viewCount   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  items       TemplateCollectionItem[]
  likes       CollectionLike[]
  
  @@index([creatorId, isPublic])
  @@index([type, isFeatured])
  @@map("template_collections")
}

// Collection Items
model TemplateCollectionItem {
  id           String              @id @default(cuid())
  collectionId String
  collection   TemplateCollection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  templateId   String
  template     MarketplaceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  order        Int                 @default(0)
  note         String?             // Curator's note about this template
  addedAt      DateTime           @default(now())
  
  @@unique([collectionId, templateId])
  @@index([collectionId, order])
  @@map("template_collection_items")
}

// Collection Likes
model CollectionLike {
  id           String              @id @default(cuid())
  collectionId String
  collection   TemplateCollection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  userId       String
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  likedAt      DateTime           @default(now())
  
  @@unique([collectionId, userId])
  @@index([userId, likedAt])
  @@map("collection_likes")
}

// Template Submissions for Editorial Review
model TemplateSubmission {
  id                String   @id @default(cuid())
  submitterId       String
  submitter         User     @relation(fields: [submitterId], references: [id], onDelete: Cascade)
  
  // Submission Details
  title             String
  description       String
  templateData      String   // JSON template data
  category          String
  requestedPrice    Float    @default(0.0)
  licenseType       String   @default("free")
  
  // Review Process
  status            String   @default("pending") // pending, reviewing, approved, rejected, revision_requested
  reviewerId        String?
  reviewer          User?    @relation("TemplateReviewer", fields: [reviewerId], references: [id])
  reviewNotes       String?
  reviewedAt        DateTime?
  
  // Quality Checklist
  hasPreview        Boolean  @default(false)
  hasDescription    Boolean  @default(false)
  hasMetadata       Boolean  @default(false)
  isFormatValid     Boolean  @default(false)
  isContentOriginal Boolean  @default(false)
  
  submittedAt       DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([submitterId, status])
  @@index([status, submittedAt])
  @@map("template_submissions")
}

// Template Analytics for Creators
model TemplateAnalytics {
  id           String              @id @default(cuid())
  templateId   String
  template     MarketplaceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  // Daily Stats
  date         DateTime            // Date for this analytics record
  views        Int                 @default(0)
  downloads    Int                 @default(0)
  purchases    Int                 @default(0)
  revenue      Float               @default(0.0)
  
  // User Engagement
  likes        Int                 @default(0)
  reviews      Int                 @default(0)
  avgRating    Float               @default(0.0)
  
  // Traffic Sources
  directViews  Int                 @default(0)
  searchViews  Int                 @default(0)
  collectionViews Int              @default(0)
  featuredViews Int                @default(0)
  
  @@unique([templateId, date])
  @@index([templateId, date])
  @@map("template_analytics")
}

// Template Tags System
model MarketplaceTag {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  category      String?  // genre, style, technique, audience
  color         String?  // Hex color for visual organization
  
  usageCount    Int      @default(0)
  isFeatured    Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  
  @@index([category, usageCount])
  @@map("marketplace_tags")
}

// Revenue Tracking for Creators
model CreatorRevenue {
  id          String   @id @default(cuid())
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  // Revenue Details
  amount      Float    // Revenue amount
  source      String   // template_sale, commission, bonus
  templateId  String?  // Related template if applicable
  
  // Payment Processing
  status      String   @default("pending") // pending, processed, paid, withheld
  currency    String   @default("USD")
  
  // Platform Split (70% creator, 30% platform)
  grossAmount Float    // Original sale amount
  feeAmount   Float    // Platform fee
  netAmount   Float    // Amount after fees
  
  earnedAt    DateTime @default(now())
  paidAt      DateTime?
  
  @@index([creatorId, earnedAt])
  @@index([status, earnedAt])
  @@map("creator_revenue")
}

// Template Challenges and Contests
model TemplateChallenge {
  id            String   @id @default(cuid())
  title         String
  description   String
  theme         String   // Monthly theme or focus
  
  // Challenge Details
  category      String   // Type of templates being solicited
  requirements  String   @default("{}") // JSON requirements
  prizes        String   @default("{}") // JSON prize structure
  
  // Timeline
  startDate     DateTime
  endDate       DateTime
  judgingEnds   DateTime
  
  // Challenge Status
  status        String   @default("upcoming") // upcoming, active, judging, completed
  winnerCount   Int      @default(3)
  
  // Stats
  submissionCount Int    @default(0)
  participantCount Int   @default(0)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  submissions   ChallengeSubmission[]
  
  @@index([status, endDate])
  @@map("template_challenges")
}

// Challenge Submissions
model ChallengeSubmission {
  id          String             @id @default(cuid())
  challengeId String
  challenge   TemplateChallenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  templateId  String
  template    MarketplaceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  submitterId String
  submitter   User               @relation(fields: [submitterId], references: [id], onDelete: Cascade)
  
  // Submission Details
  description String?           // Why this template fits the challenge
  
  // Judging
  judgeScore  Float?            // 0-100 score from judges
  publicVotes Int               @default(0)
  placement   Int?              // Final ranking if applicable
  won         Boolean           @default(false)
  
  submittedAt DateTime          @default(now())
  
  @@unique([challengeId, templateId])
  @@index([challengeId, judgeScore])
  @@map("challenge_submissions")
}

// PHASE 2D: PROFESSIONAL PUBLISHING SYSTEM

// Publishing Projects - Manuscripts ready for publication
model PublishingProject {
  id                String   @id @default(cuid())
  title             String
  subtitle          String?
  description       String?
  
  // Source Content
  projectId         String?  // Link to original writing project
  project           Project? @relation(fields: [projectId], references: [id])
  storyId           String?  // Specific story if project-based
  
  // Book Details
  isbn              String?  @unique
  genre             String   @default("[]") // JSON array of genres
  subgenre          String   @default("[]") // JSON array of subgenres
  keywords          String   @default("[]") // JSON array of keywords
  targetAudience    String   @default("adult") // children, ya, adult, literary
  language          String   @default("en")
  
  // Content Specifications
  wordCount         Int      @default(0)
  pageCount         Int      @default(0)
  chapterCount      Int      @default(0)
  
  // Publishing Details
  publishingPath    String   @default("self") // self, traditional, hybrid
  status            String   @default("draft") // draft, formatted, submitted, published
  
  // Rights and Legal
  copyrightHolder   String?
  copyrightYear     Int?
  rightsStatus      String   @default("available") // available, optioned, sold, retained
  
  // Metadata
  authorId          String
  author            User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  publishedAt       DateTime?
  
  // Relationships
  manuscripts       Manuscript[]
  submissions       PublishingSubmission[]
  contracts         PublishingContract[]
  marketingCampaigns MarketingCampaign[]
  salesData         SalesData[]
  reviews           PublishingReview[]
  rightsTransactions RightsTransaction[]
  directPublications DirectPublication[]
  
  @@index([authorId, status])
  @@index([publishingPath, status])
  @@map("publishing_projects")
}

// Manuscript Versions with Professional Formatting
model Manuscript {
  id                String           @id @default(cuid())
  publishingProjectId String
  publishingProject PublishingProject @relation(fields: [publishingProjectId], references: [id], onDelete: Cascade)
  
  version           String           @default("1.0")
  title             String
  content           String           // Full manuscript content
  
  // Formatting Standards
  formatType        String           @default("standard") // standard, publisher_specific, academic
  publisherGuideline String?         // Publisher-specific formatting rules
  wordCount         Int              @default(0)
  pageCount         Int              @default(0)
  
  // Technical Specifications
  fontSize          Int              @default(12)
  fontFamily        String           @default("Times New Roman")
  lineSpacing       Float            @default(2.0)
  margins           String           @default("{\"top\":1,\"bottom\":1,\"left\":1,\"right\":1}")
  
  // Export Formats
  docxUrl           String?          // DOCX export URL
  pdfUrl            String?          // PDF export URL
  epubUrl           String?          // ePub export URL
  mobiUrl           String?          // Mobi export URL
  
  // Status
  isFinalized       Boolean          @default(false)
  notes             String?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([publishingProjectId, version])
  @@map("manuscripts")
}

// Literary Agents and Publishers Database
model LiteraryAgent {
  id                String   @id @default(cuid())
  name              String
  agency            String
  email             String?
  website           String?
  
  // Specialization
  genres            String   @default("[]") // JSON array of genres they represent
  clientTypes       String   @default("[]") // debut, established, celebrity
  manuscriptTypes   String   @default("[]") // fiction, non-fiction, memoir, etc.
  
  // Preferences
  queryFormat       String?  // How they want queries formatted
  responseTime      String?  // Typical response time
  exclusiveQuery    Boolean  @default(false) // Requires exclusive submissions
  
  // Contact Details
  submissionEmail   String?
  submissionPortal  String?  // Online submission portal URL
  socialMedia       String   @default("{}") // JSON object of social links
  
  // Stats
  clientCount       Int      @default(0)
  recentSales       String   @default("[]") // JSON array of recent book deals
  responseRate      Float    @default(0.0) // Percentage who respond to queries
  
  // Status
  isActive          Boolean  @default(true)
  acceptingQueries  Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  submissions       PublishingSubmission[]
  
  @@index([acceptingQueries, isActive])
  @@map("literary_agents")
}

// Publishers Database
model Publisher {
  id                String   @id @default(cuid())
  name              String
  type              String   @default("traditional") // traditional, indie, hybrid, self_publishing_service
  
  // Contact Information
  website           String?
  submissionEmail   String?
  submissionPortal  String?
  
  // Specialization
  genres            String   @default("[]") // JSON array
  imprints          String   @default("[]") // JSON array of imprints
  distribution      String   @default("[]") // Distribution networks
  
  // Business Details
  royaltyRate       String?  // "8-15% hardcover, 7-10% paperback"
  advanceRange      String?  // "$5,000-50,000"
  territories       String   @default("[]") // Geographic territories
  
  // Submission Requirements
  acceptsUnsolicited Boolean @default(false)
  requiresAgent     Boolean  @default(true)
  submissionGuidelines String?
  
  // Stats
  booksPerYear      Int      @default(0)
  authorCount       Int      @default(0)
  
  // Status
  isActive          Boolean  @default(true)
  acceptingSubmissions Boolean @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  submissions       PublishingSubmission[]
  contracts         PublishingContract[]
  
  @@index([acceptsUnsolicited, isActive])
  @@index([type, acceptingSubmissions])
  @@map("publishers")
}

// Submission Tracking System
model PublishingSubmission {
  id                String           @id @default(cuid())
  publishingProjectId String
  publishingProject PublishingProject @relation(fields: [publishingProjectId], references: [id], onDelete: Cascade)
  
  // Target
  targetType        String           // agent, publisher, contest
  targetId          String?          // Agent or Publisher ID
  targetName        String           // Name if not in our database
  targetEmail       String?
  
  // Submission Details
  submissionType    String           @default("query") // query, partial, full_manuscript
  queryLetter       String?
  synopsis          String?
  samplePages       String?
  fullManuscript    String?
  
  // Tracking
  submittedAt       DateTime         @default(now())
  followUpDate      DateTime?
  responseDate      DateTime?
  status            String           @default("submitted") // submitted, responded, rejected, requested, offered
  response          String?          // Their response
  
  // Metadata
  notes             String?
  isExclusive       Boolean          @default(false)
  
  // Relationships
  agent             LiteraryAgent?   @relation(fields: [targetId], references: [id])
  publisher         Publisher?       @relation(fields: [targetId], references: [id])
  
  @@index([publishingProjectId, status])
  @@index([submittedAt, status])
  @@map("publishing_submissions")
}

// Publishing Contracts and Deals
model PublishingContract {
  id                String           @id @default(cuid())
  publishingProjectId String
  publishingProject PublishingProject @relation(fields: [publishingProjectId], references: [id], onDelete: Cascade)
  
  // Contract Details
  contractType      String           @default("book_deal") // book_deal, option, film_rights, translation
  publisherId       String?
  publisher         Publisher?       @relation(fields: [publisherId], references: [id])
  agentId           String?
  
  // Financial Terms
  advance           Float            @default(0.0)
  royaltyRate       String?          // "10% hardcover, 8% paperback, 25% ebook"
  territories       String           @default("[]") // Geographic rights
  
  // Rights Granted
  rightsGranted     String           @default("[]") // print, ebook, audio, translation, film
  exclusivityPeriod Int?             // Months of exclusivity
  
  // Contract Timeline
  signedAt          DateTime?
  effectiveDate     DateTime?
  expirationDate    DateTime?
  
  // Status
  status            String           @default("negotiating") // negotiating, signed, active, expired, terminated
  
  // Documents
  contractUrl       String?          // Signed contract document
  notes             String?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([publishingProjectId, status])
  @@map("publishing_contracts")
}

// Rights Management
model RightsTransaction {
  id                String           @id @default(cuid())
  publishingProjectId String
  publishingProject PublishingProject @relation(fields: [publishingProjectId], references: [id], onDelete: Cascade)
  
  // Transaction Details
  rightsType        String           // film, tv, translation, audio, foreign, subsidiary
  territory         String?          // Geographic territory
  language          String?          // For translation rights
  
  // Parties
  grantorName       String           // Who is granting the rights
  granteeName       String           // Who is receiving the rights
  agentName         String?          // Agent facilitating
  
  // Financial Terms
  advance           Float            @default(0.0)
  royaltyRate       Float            @default(0.0)
  minimumGuarantee  Float            @default(0.0)
  
  // Rights Duration
  startDate         DateTime
  endDate           DateTime?
  isExclusive       Boolean          @default(true)
  
  // Status
  status            String           @default("negotiating") // negotiating, active, expired, terminated
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([publishingProjectId, rightsType])
  @@map("rights_transactions")
}

// Marketing Campaigns
model MarketingCampaign {
  id                String           @id @default(cuid())
  publishingProjectId String
  publishingProject PublishingProject @relation(fields: [publishingProjectId], references: [id], onDelete: Cascade)
  
  name              String
  description       String?
  campaignType      String           @default("launch") // pre_launch, launch, ongoing, seasonal
  
  // Timeline
  startDate         DateTime
  endDate           DateTime?
  
  // Channels
  channels          String           @default("[]") // social_media, email, advertising, events, media
  
  // Budget and Goals
  budget            Float            @default(0.0)
  targetReach       Int              @default(0)
  targetSales       Int              @default(0)
  
  // Assets
  pressKit          String?          // Press kit URL
  reviewCopies      Int              @default(0)
  mediaList         String           @default("[]") // JSON array of media contacts
  
  // Status
  status            String           @default("planning") // planning, active, completed, paused
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relationships
  activities        MarketingActivity[]
  
  @@index([publishingProjectId, status])
  @@map("marketing_campaigns")
}

// Marketing Activities
model MarketingActivity {
  id          String          @id @default(cuid())
  campaignId  String
  campaign    MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  type        String          // social_post, email_blast, ad_campaign, interview, event
  platform    String?         // Facebook, Twitter, BookBub, etc.
  
  // Scheduling
  scheduledAt DateTime
  completedAt DateTime?
  
  // Performance
  reach       Int             @default(0)
  engagement  Int             @default(0)
  conversions Int             @default(0)
  cost        Float           @default(0.0)
  
  // Status
  status      String          @default("scheduled") // scheduled, completed, cancelled
  
  // Content
  content     String?         // Post content, email body, etc.
  mediaUrls   String          @default("[]") // JSON array of media URLs
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  @@index([campaignId, scheduledAt])
  @@map("marketing_activities")
}

// Sales Data and Analytics
model SalesData {
  id                String           @id @default(cuid())
  publishingProjectId String
  publishingProject PublishingProject @relation(fields: [publishingProjectId], references: [id], onDelete: Cascade)
  
  // Sales Period
  date              DateTime         // Date for this sales record
  platform          String           // Amazon, Barnes & Noble, Apple Books, etc.
  format            String           // ebook, paperback, hardcover, audiobook
  
  // Sales Metrics
  unitsSold         Int              @default(0)
  grossRevenue      Float            @default(0.0)
  netRevenue        Float            @default(0.0) // After platform fees
  royaltiesEarned   Float            @default(0.0)
  
  // Performance Data
  rank              Int?             // Bestseller rank if available
  reviews           Int              @default(0) // New reviews this period
  averageRating     Float            @default(0.0)
  
  createdAt         DateTime         @default(now())
  
  @@unique([publishingProjectId, date, platform, format])
  @@index([publishingProjectId, date])
  @@map("sales_data")
}

// Professional Reviews and Media Coverage
model PublishingReview {
  id                String           @id @default(cuid())
  publishingProjectId String
  publishingProject PublishingProject @relation(fields: [publishingProjectId], references: [id], onDelete: Cascade)
  
  // Review Source
  reviewer          String           // Name of reviewer or publication
  publication       String?          // Publication name if different
  type              String           @default("review") // review, interview, feature, blurb
  
  // Review Details
  title             String?
  content           String?
  rating            Float?           // Star rating if applicable
  url               String?          // Link to review
  
  // Publication Info
  publishedAt       DateTime?
  circulation       Int?             // Publication circulation
  reach             Int?             // Estimated reach
  
  // Classification
  sentiment         String           @default("neutral") // positive, neutral, negative
  isInfluential     Boolean          @default(false)    // Major publication/reviewer
  
  createdAt         DateTime         @default(now())
  
  @@index([publishingProjectId, sentiment])
  @@map("publishing_reviews")
}

// Direct Publishing Integrations
model PublishingPlatform {
  id                String   @id @default(cuid())
  name              String   @unique // "Amazon KDP", "IngramSpark", "Apple Books"
  type              String   // ebook, print, audio, distribution
  
  // API Integration
  hasApi            Boolean  @default(false)
  apiBaseUrl        String?
  authType          String?  // oauth, api_key, basic
  
  // Platform Details
  regions           String   @default("[]") // Supported regions
  formats           String   @default("[]") // Supported file formats
  royaltyRates      String   @default("{}") // JSON object of royalty rates
  
  // Requirements
  requirements      String   @default("{}") // JSON object of platform requirements
  guidelines        String?  // Formatting and content guidelines
  
  isActive          Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  publications      DirectPublication[]
  
  @@map("publishing_platforms")
}

// Direct Publishing Records
model DirectPublication {
  id                String           @id @default(cuid())
  publishingProjectId String
  publishingProject PublishingProject @relation(fields: [publishingProjectId], references: [id], onDelete: Cascade)
  platformId        String
  platform          PublishingPlatform @relation(fields: [platformId], references: [id])
  
  // Publication Details
  platformBookId    String?          // Platform-specific book ID
  title             String
  description       String?
  price             Float            @default(0.0)
  
  // Metadata
  categories        String           @default("[]") // Platform categories
  keywords          String           @default("[]") // Search keywords
  
  // Files
  manuscriptUrl     String?          // Uploaded manuscript
  coverUrl          String?          // Book cover image
  
  // Status
  status            String           @default("draft") // draft, submitted, under_review, published, rejected
  publishedAt       DateTime?
  lastSyncAt        DateTime?
  
  // Platform Response
  platformResponse  String?          // Response from platform API
  errorMessage      String?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@unique([publishingProjectId, platformId])
  @@index([platformId, status])
  @@map("direct_publications")
}

// Author Platforms and Websites
model AuthorPlatform {
  id          String   @id @default(cuid())
  authorId    String   @unique
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Website
  domain      String?  // Custom domain
  subdomain   String?  // platform.astral-notes.com
  websiteUrl  String?  // Final website URL
  
  // Branding
  brandName   String?  // Author brand name
  tagline     String?  // Author tagline
  bio         String?  // Author bio
  
  // Design
  theme       String   @default("professional") // Theme template
  colorScheme String   @default("{}")  // JSON color configuration
  logo        String?  // Logo URL
  headerImage String?  // Header background image
  
  // Content
  pages       String   @default("[]") // JSON array of custom pages
  blogPosts   String   @default("[]") // JSON array of blog posts
  
  // SEO
  metaTitle   String?
  metaDescription String?
  keywords    String   @default("[]") // JSON array
  
  // Social Media
  socialLinks String   @default("{}") // JSON object of social links
  
  // Analytics
  googleAnalytics String? // GA tracking code
  
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("author_platforms")
}


