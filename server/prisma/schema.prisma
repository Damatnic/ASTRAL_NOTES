// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      String   @default("user") // user, admin
  aiEnabled Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User preferences
  preferences UserPreferences?

  // Owned content
  projects     Project[]
  generalNotes GeneralNote[]

  // Collaboration
  projectCollaborators ProjectCollaborator[]
  comments             Comment[]

  // AI usage tracking
  aiUsageRecords AIUsageRecord[]
  aiAuditLogs    AIAuditLog[]

  @@map("users")
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  theme              String  @default("light") // light, dark, auto
  editorFontSize     Int     @default(14)
  editorFontFamily   String  @default("Inter")
  autoSave           Boolean @default(true)
  autoSaveInterval   Int     @default(30) // seconds
  showWordCount      Boolean @default(true)
  showCharacterCount Boolean @default(false)
  distrationFreeMode Boolean @default(false)
  keyboardShortcuts  String @default("{}")

  @@map("user_preferences")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  color       String   @default("#3B82F6") // Hex color for project identification
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Project content
  stories     Story[]
  notes       ProjectNote[]
  characters  Character[]
  locations   Location[]
  items       Item[]
  plotThreads PlotThread[]
  themes      Theme[]
  timelines   Timeline[]

  // Collaboration
  collaborators ProjectCollaborator[]

  // Codex system relations
  codexEntities      CodexEntity[]
  codexTimelineEvents CodexTimelineEvent[]
  codexTags          CodexTag[]
  entityCollections  EntityCollection[]
  consistencyChecks  ConsistencyCheck[]

  @@map("projects")
}

model ProjectCollaborator {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String   @default("viewer") // owner, editor, viewer
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
  @@map("project_collaborators")
}

model Story {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("planning") // planning, drafting, revising, completed
  wordCount   Int      @default(0)
  targetWords Int?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Story content
  scenes    Scene[]
  notes     StoryNote[]
  chapters  Chapter[]
  acts      Act[]
  timelines Timeline[]

  @@map("stories")
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  order     Int
  wordCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  scenes Scene[]

  @@map("chapters")
}

model Act {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  scenes Scene[]

  @@map("acts")
}

model Scene {
  id          String   @id @default(cuid())
  title       String
  content     String   @default("")
  summary     String?
  wordCount   Int      @default(0)
  order       Int      @default(0)
  status      String   @default("draft") // outline, draft, revision, complete
  povCharacter String? // Character ID or name
  location    String?  // Location ID or name
  timeOfDay   String?
  date        DateTime?
  tags        String @default("[]")
  color       String?  // For visual organization
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
  actId     String?
  act       Act?     @relation(fields: [actId], references: [id])

  // Relationships
  characters      SceneCharacter[]
  dependencies    SceneDependency[] @relation("SceneDependencies")
  dependents      SceneDependency[] @relation("SceneDependents")
  timelineEntries TimelineEntry[]
  links           Link[]            @relation("SceneLinks")
  comments        Comment[]

  @@map("scenes")
}

model SceneCharacter {
  id        String @id @default(cuid())
  sceneId   String
  scene     Scene  @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  characterId String
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  role      String @default("present") // present, mentioned, pov

  @@unique([sceneId, characterId])
  @@map("scene_characters")
}

model SceneDependency {
  id            String @id @default(cuid())
  sceneId       String
  scene         Scene  @relation("SceneDependencies", fields: [sceneId], references: [id], onDelete: Cascade)
  dependentSceneId String
  dependentScene   Scene  @relation("SceneDependents", fields: [dependentSceneId], references: [id], onDelete: Cascade)
  type          String @default("follows") // follows, requires, blocks
  description   String?

  @@unique([sceneId, dependentSceneId])
  @@map("scene_dependencies")
}

// Notes system
model GeneralNote {
  id        String   @id @default(cuid())
  title     String
  content   String   @default("")
  type      String   @default("general") // general, research, idea, reference
  tags      String @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  links    Link[]    @relation("GeneralNoteLinks")
  comments Comment[]

  @@map("general_notes")
}

model ProjectNote {
  id        String   @id @default(cuid())
  title     String
  content   String   @default("")
  type      String   @default("general") // general, worldbuilding, series_bible, research
  tags      String @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  links    Link[]    @relation("ProjectNoteLinks")
  comments Comment[]

  @@map("project_notes")
}

model StoryNote {
  id        String   @id @default(cuid())
  title     String
  content   String   @default("")
  type      String   @default("general") // general, plot, character, research
  tags      String @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  links    Link[]    @relation("StoryNoteLinks")
  comments Comment[]

  @@map("story_notes")
}

// Entity types for rich world-building
model Character {
  id          String   @id @default(cuid())
  name        String
  description String   @default("")
  avatar      String?
  traits      String @default("{}") // Physical, personality, background
  arc         String @default("{}") // Character development arc
  relationships String @default("{}") // Relationships with other characters
  backstory   String   @default("")
  motivation  String   @default("")
  conflict    String   @default("")
  tags        String @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  scenes           SceneCharacter[]
  timelineEntries  TimelineEntry[]
  links            Link[]           @relation("CharacterLinks")
  comments         Comment[]

  @@map("characters")
}

model Location {
  id          String   @id @default(cuid())
  name        String
  description String   @default("")
  type        String   @default("place") // place, region, building, room
  parent      String? // Parent location ID for hierarchy
  coordinates String?    @default("{}") // Map coordinates if applicable
  significance String  @default("")
  atmosphere  String   @default("")
  tags        String @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  timelineEntries TimelineEntry[]
  links           Link[]          @relation("LocationLinks")
  comments        Comment[]

  @@map("locations")
}

model Item {
  id           String   @id @default(cuid())
  name         String
  description  String   @default("")
  type         String   @default("object") // object, weapon, artifact, document
  properties   String @default("{}") // Physical properties, magical properties, etc.
  history      String   @default("")
  currentHolder String? // Character ID or location
  significance String   @default("")
  tags         String @default("[]")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  timelineEntries TimelineEntry[]
  links           Link[]          @relation("ItemLinks")
  comments        Comment[]

  @@map("items")
}

model PlotThread {
  id          String   @id @default(cuid())
  name        String
  description String   @default("")
  status      String   @default("active") // active, resolved, abandoned
  priority    String   @default("medium") // high, medium, low
  resolution  String   @default("")
  tags        String @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  timelineEntries TimelineEntry[]
  links           Link[]          @relation("PlotThreadLinks")
  comments        Comment[]

  @@map("plot_threads")
}

model Theme {
  id          String   @id @default(cuid())
  name        String
  description String   @default("")
  occurrences String @default("{}") // Array of scene IDs where theme appears
  analysis    String   @default("")
  tags        String @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  links    Link[]    @relation("ThemeLinks")
  comments Comment[]

  @@map("themes")
}

// Timeline system
model Timeline {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("story") // story, character, world, narrative
  startDate   DateTime?
  endDate     DateTime?
  scale       String   @default("days") // minutes, hours, days, months, years
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  storyId   String?
  story     Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)

  entries TimelineEntry[]

  @@map("timelines")
}

model TimelineEntry {
  id          String    @id @default(cuid())
  title       String
  description String?
  date        DateTime
  endDate     DateTime? // For events with duration
  type        String    @default("event") // event, scene, milestone, deadline
  importance  Int       @default(1) // 1-5 scale
  tags        String @default("[]")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  timelineId String
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)

  // Optional connections to other entities
  sceneId     String?
  scene       Scene?     @relation(fields: [sceneId], references: [id])
  characterId String?
  character   Character? @relation(fields: [characterId], references: [id])
  locationId  String?
  location    Location?  @relation(fields: [locationId], references: [id])
  itemId      String?
  item        Item?      @relation(fields: [itemId], references: [id])
  plotThreadId String?
  plotThread  PlotThread? @relation(fields: [plotThreadId], references: [id])

  @@map("timeline_entries")
}

// Linking system
model Link {
  id          String   @id @default(cuid())
  sourceType  String   // Type of source entity
  sourceId    String   // ID of source entity
  targetType  String   // Type of target entity
  targetId    String   // ID of target entity
  linkText    String   // The text used in the link
  contextBefore String @default("") // Text before the link for context
  contextAfter  String @default("") // Text after the link for context
  createdAt   DateTime @default(now())

  // Relations to different entity types (nullable)
  sourceScene        Scene?        @relation("SceneLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceGeneralNote  GeneralNote?  @relation("GeneralNoteLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceProjectNote  ProjectNote?  @relation("ProjectNoteLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceStoryNote    StoryNote?    @relation("StoryNoteLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceCharacter    Character?    @relation("CharacterLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceLocation     Location?     @relation("LocationLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceItem         Item?         @relation("ItemLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourcePlotThread   PlotThread?   @relation("PlotThreadLinks", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceTheme        Theme?        @relation("ThemeLinks", fields: [sourceId], references: [id], onDelete: Cascade)

  @@unique([sourceType, sourceId, targetType, targetId, linkText])
  @@map("links")
}

// Comments and collaboration
model Comment {
  id        String   @id @default(cuid())
  content   String
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Polymorphic relations to different entity types
  entityType String
  entityId   String

  scene         Scene?        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  generalNote   GeneralNote?  @relation(fields: [entityId], references: [id], onDelete: Cascade)
  projectNote   ProjectNote?  @relation(fields: [entityId], references: [id], onDelete: Cascade)
  storyNote     StoryNote?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  character     Character?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  location      Location?     @relation(fields: [entityId], references: [id], onDelete: Cascade)
  item          Item?         @relation(fields: [entityId], references: [id], onDelete: Cascade)
  plotThread    PlotThread?   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  theme         Theme?        @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Version control for all content
model Version {
  id          String   @id @default(cuid())
  entityType  String   // Type of entity being versioned
  entityId    String   // ID of the entity
  content     String     // Snapshot of the entity at this version
  changeType  String   @default("update") // create, update, delete
  description String?  // Optional description of changes
  createdAt   DateTime @default(now())
  userId      String   // User who made the change

  @@map("versions")
}

// CODEX SYSTEM - Advanced Entity Management and Relationships

// Universal Codex Entity (polymorphic design for all entity types)
model CodexEntity {
  id          String   @id @default(cuid())
  type        String   // 'character', 'location', 'object', 'lore', 'subplot', 'organization', 'event', 'concept'
  name        String
  description String   @default("")
  data        String   @default("{}") // JSON blob for type-specific fields
  tags        String   @default("[]") // JSON array of tags
  category    String?  // Primary category
  subcategory String?  // Secondary category
  importance  Int      @default(3) // 1-5 scale (5 = most important)
  
  // Metadata
  avatar      String?  // Image/icon URL
  color       String?  // Hex color for visual identification
  notes       String   @default("") // Additional notes
  isUniversal Boolean  @default(false) // True for cross-project entities
  
  // Tracking
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  projectId   String?  // null for universal entities
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Entity connections
  relationshipsFrom EntityRelationship[] @relation("FromEntity")
  relationshipsTo   EntityRelationship[] @relation("ToEntity")
  
  // Text references and mentions
  textReferences    TextReference[]
  mentionSuggestions MentionSuggestion[]
  
  // Timeline participation
  timelineEvents    CodexTimelineEvent[]
  
  @@index([type, projectId])
  @@index([name, projectId])
  @@index([isUniversal])
  @@map("codex_entities")
}

// Entity Relationships and Connections
model EntityRelationship {
  id          String   @id @default(cuid())
  fromEntityId String
  fromEntity   CodexEntity @relation("FromEntity", fields: [fromEntityId], references: [id], onDelete: Cascade)
  toEntityId   String
  toEntity     CodexEntity @relation("ToEntity", fields: [toEntityId], references: [id], onDelete: Cascade)
  
  type        String   // 'family', 'organization', 'location', 'conflict', 'alliance', 'owns', 'member_of', 'located_in'
  description String?  // Description of the relationship
  strength    Int      @default(5) // 1-10 relationship importance/strength
  
  // Relationship details
  isDirectional Boolean @default(true) // False for bidirectional relationships
  startDate     DateTime? // When relationship began
  endDate       DateTime? // When relationship ended (if applicable)
  status        String   @default("active") // active, ended, complicated
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([fromEntityId, toEntityId, type])
  @@map("entity_relationships")
}

// Text Reference Detection and Auto-Highlighting
model TextReference {
  id          String   @id @default(cuid())
  entityId    String
  entity      CodexEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Source location
  sourceType  String   // 'scene', 'note', 'story', etc.
  sourceId    String   // ID of the source document
  
  // Text position and context
  text        String   // The actual text that references the entity
  startPos    Int      // Character position where reference starts
  endPos      Int      // Character position where reference ends
  contextBefore String @default("") // 50 chars before for context
  contextAfter  String @default("") // 50 chars after for context
  
  // Detection metadata
  confidence  Float    @default(1.0) // 0.0-1.0 confidence score
  isConfirmed Boolean  @default(false) // User has confirmed this reference
  isIgnored   Boolean  @default(false) // User has marked to ignore
  
  createdAt   DateTime @default(now())
  
  @@index([sourceType, sourceId])
  @@index([entityId, sourceType])
  @@map("text_references")
}

// Auto-Detection Suggestions for New Entities
model MentionSuggestion {
  id          String   @id @default(cuid())
  text        String   // The suggested entity name/text
  sourceType  String   // Where this was found
  sourceId    String   // Source document ID
  
  // Context
  context     String   // Surrounding text for context
  frequency   Int      @default(1) // How many times this appears
  
  // Suggestion metadata
  suggestedType String? // Suggested entity type (character, location, etc.)
  confidence    Float   @default(0.5) // 0.0-1.0 confidence this should be an entity
  
  // State
  status      String   @default("pending") // pending, accepted, rejected, ignored
  
  // If accepted, link to created entity
  entityId    String?
  entity      CodexEntity? @relation(fields: [entityId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now())
  
  @@index([status, confidence])
  @@index([text, sourceType])
  @@map("mention_suggestions")
}

// Enhanced Timeline for Codex Events
model CodexTimelineEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  endDate     DateTime? // For events with duration
  
  // Event classification
  type        String   @default("event") // event, milestone, meeting, conflict, discovery
  importance  Int      @default(3) // 1-5 scale
  
  // Connections
  entityId    String?
  entity      CodexEntity? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Timeline grouping
  timelineGroup String? // Group related events together
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([date, projectId])
  @@index([entityId, type])
  @@map("codex_timeline_events")
}

// Codex Search and Organization
model CodexTag {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  // Hex color for visual organization
  category    String?  // Tag category/grouping
  
  projectId   String?  // null for universal tags
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  usageCount  Int      @default(0) // How many entities use this tag
  
  createdAt   DateTime @default(now())
  
  @@unique([name, projectId])
  @@map("codex_tags")
}

// Entity Collections and Smart Groups
model EntityCollection {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("manual") // manual, smart, auto
  
  // Smart collection criteria (JSON)
  criteria    String   @default("{}") // Query criteria for auto-collections
  
  // Collection metadata
  color       String?
  icon        String?
  isPublic    Boolean  @default(false) // Shareable collections
  
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Collection members
  members     EntityCollectionMember[]
  
  @@map("entity_collections")
}

model EntityCollectionMember {
  id           String   @id @default(cuid())
  collectionId String
  collection   EntityCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  entityId     String
  
  order        Int      @default(0) // Manual ordering within collection
  addedAt      DateTime @default(now())
  
  @@unique([collectionId, entityId])
  @@map("entity_collection_members")
}

// Consistency Tracking and Validation
model ConsistencyCheck {
  id          String   @id @default(cuid())
  entityId    String   // Entity being checked
  type        String   // Type of consistency check
  description String   // What inconsistency was found
  severity    String   @default("medium") // low, medium, high, critical
  
  // Check details
  conflictingData String @default("{}") // JSON data about the conflict
  suggestions     String @default("[]") // JSON array of suggestions to fix
  
  // Resolution
  status      String   @default("open") // open, resolved, ignored
  resolvedAt  DateTime?
  resolution  String?  // How it was resolved
  
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([entityId, status])
  @@index([projectId, severity])
  @@map("consistency_checks")
}

// AI SYSTEM - Usage tracking, audit logs, and service management

// AI Usage Tracking
model AIUsageRecord {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId        String?
  provider         String   // openai, anthropic, google, local
  model            String   // gpt-4, claude-3, etc.
  promptTokens     Int      @default(0)
  completionTokens Int      @default(0)
  totalTokens      Int      @default(0)
  cost             Float    @default(0.0)
  requestType      String   // generate, analyze, workshop, extract
  timestamp        DateTime @default(now())
  success          Boolean
  errorMessage     String?

  @@index([userId, timestamp])
  @@index([provider, timestamp])
  @@map("ai_usage_records")
}

// AI Audit Logs for Security and Compliance
model AIAuditLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      String   // generate, analyze, extract, workshop
  provider    String
  model       String
  promptHash  String   // Hashed prompt for privacy
  tokensUsed  Int
  cost        Float
  success     Boolean
  timestamp   DateTime @default(now())
  ipAddress   String
  userAgent   String

  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@map("ai_audit_logs")
}

// AI Workshop Sessions
model AIWorkshopSession {
  id          String   @id @default(cuid())
  title       String
  description String?
  userId      String
  projectId   String?
  storyId     String?
  sceneId     String?
  settings    String   @default("{}") // JSON settings
  context     String   @default("{}") // JSON context
  archived    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  messages AIWorkshopMessage[]

  @@index([userId, archived])
  @@index([projectId, archived])
  @@map("ai_workshop_sessions")
}

// AI Workshop Messages
model AIWorkshopMessage {
  id        String   @id @default(cuid())
  sessionId String
  session   AIWorkshopSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  role      String   // user, assistant, system
  content   String
  metadata  String   @default("{}") // JSON metadata
  timestamp DateTime @default(now())

  @@index([sessionId, timestamp])
  @@map("ai_workshop_messages")
}

// AI Prompt Templates
model AIPromptTemplate {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // writing_assistance, character_development, etc.
  tags        String   @default("[]") // JSON array
  prompt      String
  systemPrompt String?
  variables   String   @default("[]") // JSON array of variables
  aiSettings  String   @default("{}") // JSON AI settings
  examples    String   @default("[]") // JSON array of examples
  metadata    String   @default("{}") // JSON metadata
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Float    @default(0.0)
  usageCount  Int      @default(0)
  isFavorite  Boolean  @default(false)
  isPublic    Boolean  @default(false)

  executions AIPromptExecution[]

  @@index([category, isPublic])
  @@index([createdBy, isPublic])
  @@map("ai_prompt_templates")
}

// AI Prompt Executions
model AIPromptExecution {
  id         String   @id @default(cuid())
  templateId String
  template   AIPromptTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId     String
  variables  String   @default("{}") // JSON variables used
  output     String
  usage      String   @default("{}") // JSON usage stats
  timestamp  DateTime @default(now())

  @@index([templateId, timestamp])
  @@index([userId, timestamp])
  @@map("ai_prompt_executions")
}

// AI Recipe Workflows
model AIRecipe {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // story_development, character_creation, etc.
  tags        String   @default("[]") // JSON array
  steps       String   @default("[]") // JSON array of steps
  variables   String   @default("[]") // JSON array of variables
  metadata    String   @default("{}") // JSON metadata
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Float    @default(0.0)
  usageCount  Int      @default(0)
  isFavorite  Boolean  @default(false)
  isPublic    Boolean  @default(false)

  executions AIRecipeExecution[]

  @@index([category, isPublic])
  @@index([createdBy, isPublic])
  @@map("ai_recipes")
}

// AI Recipe Executions
model AIRecipeExecution {
  id        String   @id @default(cuid())
  recipeId  String
  recipe    AIRecipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  userId    String
  input     String   @default("{}") // JSON input variables
  output    String   @default("{}") // JSON output
  status    String   @default("pending") // pending, running, completed, failed
  steps     String   @default("[]") // JSON array of step results
  startTime DateTime @default(now())
  endTime   DateTime?
  error     String?

  @@index([recipeId, startTime])
  @@index([userId, startTime])
  @@map("ai_recipe_executions")
}

// AI Content Analysis
model AIContentAnalysis {
  id           String   @id @default(cuid())
  userId       String
  projectId    String?
  text         String
  wordCount    Int
  characterCount Int
  qualityScore Float
  findings     String   @default("[]") // JSON array of findings
  suggestions  String   @default("[]") // JSON array of suggestions
  entities     String   @default("[]") // JSON array of detected entities
  styleMetrics String   @default("{}") // JSON style analysis
  usage        String   @default("{}") // JSON usage stats
  timestamp    DateTime @default(now())

  @@index([userId, timestamp])
  @@index([projectId, timestamp])
  @@map("ai_content_analysis")
}

// AI-ism Detection Results
model AIDetection {
  id              String   @id @default(cuid())
  userId          String
  text            String
  humanLikelihood Float    // 0-1 score
  aiScore         Float    // 0-1 score
  patterns        String   @default("[]") // JSON array of detected patterns
  suggestions     String   @default("[]") // JSON array of suggestions
  summary         String
  usage           String   @default("{}") // JSON usage stats
  timestamp       DateTime @default(now())

  @@index([userId, timestamp])
  @@map("ai_detections")
}
