/**
 * Project Management Test Report Generator
 * Generates comprehensive test reports with visual elements and detailed analysis
 */

import type { 
  ProjectManagementTestReport, 
  TestSuiteResult, 
  TestResult,
  TestError,
  DataIntegrityReport,
  CompatibilityReport 
} from './projectManagementTestRunner';

export class ProjectManagementTestReportGenerator {
  private static instance: ProjectManagementTestReportGenerator;

  public static getInstance(): ProjectManagementTestReportGenerator {
    if (!ProjectManagementTestReportGenerator.instance) {
      ProjectManagementTestReportGenerator.instance = new ProjectManagementTestReportGenerator();
    }
    return ProjectManagementTestReportGenerator.instance;
  }

  /**
   * Generate HTML report
   */
  public generateHTMLReport(report: ProjectManagementTestReport): string {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ASTRAL_NOTES Project Management Test Report</title>
    <style>
        ${this.getReportStyles()}
    </style>
</head>
<body>
    <div class="container">
        ${this.generateHeader(report)}
        ${this.generateSummary(report)}
        ${this.generateSuitesSection(report)}
        ${this.generateCoverageSection(report)}
        ${this.generatePerformanceSection(report)}
        ${this.generateIssuesSection(report)}
        ${this.generateDataIntegritySection(report)}
        ${this.generateCompatibilitySection(report)}
        ${this.generateRecommendationsSection(report)}
        ${this.generateFooter(report)}
    </div>
    <script>
        ${this.getReportScripts()}
    </script>
</body>
</html>`;
  }

  /**
   * Generate Markdown report
   */
  public generateMarkdownReport(report: ProjectManagementTestReport): string {
    return `# ASTRAL_NOTES Project Management Test Report

Generated on: ${new Date(report.timestamp).toLocaleString()}

## Executive Summary

${this.generateSummaryMarkdown(report)}

## Test Suites

${report.suites.map(suite => this.generateSuiteMarkdown(suite)).join('\n\n')}

## Code Coverage

${this.generateCoverageMarkdown(report)}

## Performance Metrics

${this.generatePerformanceMarkdown(report)}

## Issues and Recommendations

${this.generateIssuesMarkdown(report)}

## Data Integrity

${this.generateDataIntegrityMarkdown(report)}

## Compatibility

${this.generateCompatibilityMarkdown(report)}

## Environment

- **Browser**: ${report.environment.browser}
- **Platform**: ${report.environment.platform}
- **Node Version**: ${report.environment.nodeVersion}
- **Test Framework**: ${report.environment.testFramework}

---

*Report generated by ASTRAL_NOTES Test Suite*
`;
  }

  /**
   * Generate JSON report
   */
  public generateJSONReport(report: ProjectManagementTestReport): string {
    return JSON.stringify(report, null, 2);
  }

  /**
   * Generate console output report
   */
  public generateConsoleReport(report: ProjectManagementTestReport): void {
    console.log('\n' + '='.repeat(80));
    console.log('🚀 ASTRAL_NOTES PROJECT MANAGEMENT TEST REPORT');
    console.log('='.repeat(80));
    
    // Summary
    console.log('\n📊 SUMMARY');
    console.log('-'.repeat(40));
    console.log(`Status: ${this.getStatusEmoji(report.summary.overallStatus)} ${report.summary.overallStatus.toUpperCase()}`);
    console.log(`Total Suites: ${report.summary.totalSuites}`);
    console.log(`Total Tests: ${report.summary.totalTests}`);
    console.log(`✅ Passed: ${report.summary.passed}`);
    console.log(`❌ Failed: ${report.summary.failed}`);
    console.log(`⏭️ Skipped: ${report.summary.skipped}`);
    console.log(`⏱️ Duration: ${(report.summary.duration / 1000).toFixed(2)}s`);

    // Test Suites
    console.log('\n🧪 TEST SUITES');
    console.log('-'.repeat(40));
    report.suites.forEach(suite => {
      const status = this.getStatusEmoji(suite.status);
      const duration = (suite.duration / 1000).toFixed(2);
      console.log(`${status} ${suite.name} (${duration}s)`);
      
      if (suite.errors.length > 0) {
        suite.errors.forEach(error => {
          console.log(`  ❌ ${error.test}: ${error.message}`);
        });
      }
      
      if (suite.warnings.length > 0) {
        suite.warnings.forEach(warning => {
          console.log(`  ⚠️ ${warning}`);
        });
      }
    });

    // Coverage
    console.log('\n📈 CODE COVERAGE');
    console.log('-'.repeat(40));
    console.log(`Overall: ${report.coverage.overall.toFixed(1)}%`);
    console.log(`Functions: ${report.coverage.functions.toFixed(1)}%`);
    console.log(`Lines: ${report.coverage.lines.toFixed(1)}%`);
    console.log(`Branches: ${report.coverage.branches.toFixed(1)}%`);

    // Performance
    console.log('\n⚡ PERFORMANCE');
    console.log('-'.repeat(40));
    console.log(`Average Test Duration: ${report.performance.averageTestDuration.toFixed(2)}ms`);
    console.log(`Slowest Test: ${report.performance.slowestTest}`);
    console.log(`Memory Usage: ${report.performance.memoryUsage.toFixed(1)}MB`);
    console.log(`Storage Operations: ${report.performance.storageOperations}`);

    // Issues
    if (report.issues.criticalErrors.length > 0 || report.issues.warnings.length > 0) {
      console.log('\n⚠️ ISSUES');
      console.log('-'.repeat(40));
      
      if (report.issues.criticalErrors.length > 0) {
        console.log('Critical Errors:');
        report.issues.criticalErrors.forEach(error => {
          console.log(`  ❌ ${error.test}: ${error.message}`);
        });
      }
      
      if (report.issues.warnings.length > 0) {
        console.log('Warnings:');
        report.issues.warnings.forEach(warning => {
          console.log(`  ⚠️ ${warning}`);
        });
      }
    }

    // Recommendations
    if (report.issues.recommendations.length > 0) {
      console.log('\n💡 RECOMMENDATIONS');
      console.log('-'.repeat(40));
      report.issues.recommendations.forEach((rec, index) => {
        console.log(`${index + 1}. ${rec}`);
      });
    }

    console.log('\n' + '='.repeat(80));
  }

  /**
   * Save report to file (for Node.js environments)
   */
  public async saveReportToFile(
    report: ProjectManagementTestReport, 
    format: 'html' | 'markdown' | 'json' = 'html',
    filename?: string
  ): Promise<string> {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const defaultFilename = `project-management-test-report-${timestamp}.${format === 'markdown' ? 'md' : format}`;
    const finalFilename = filename || defaultFilename;

    let content: string;
    switch (format) {
      case 'html':
        content = this.generateHTMLReport(report);
        break;
      case 'markdown':
        content = this.generateMarkdownReport(report);
        break;
      case 'json':
        content = this.generateJSONReport(report);
        break;
      default:
        throw new Error(`Unsupported format: ${format}`);
    }

    // In a browser environment, trigger download
    if (typeof window !== 'undefined') {
      this.downloadReport(content, finalFilename, format);
    }

    return finalFilename;
  }

  // Private helper methods

  private getReportStyles(): string {
    return `
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
        line-height: 1.6;
        color: #333;
        background: #f5f7fa;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
      }

      .header {
        text-align: center;
        margin-bottom: 30px;
        padding: 30px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }

      .header h1 {
        color: #2c3e50;
        margin-bottom: 10px;
        font-size: 2.5em;
      }

      .header .subtitle {
        color: #7f8c8d;
        font-size: 1.1em;
      }

      .summary {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }

      .summary-card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border-left: 4px solid #3498db;
      }

      .summary-card.passed {
        border-left-color: #27ae60;
      }

      .summary-card.failed {
        border-left-color: #e74c3c;
      }

      .summary-card.warning {
        border-left-color: #f39c12;
      }

      .summary-card h3 {
        color: #2c3e50;
        margin-bottom: 10px;
      }

      .summary-card .value {
        font-size: 2em;
        font-weight: bold;
        color: #3498db;
      }

      .summary-card.passed .value {
        color: #27ae60;
      }

      .summary-card.failed .value {
        color: #e74c3c;
      }

      .section {
        background: white;
        margin-bottom: 30px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        overflow: hidden;
      }

      .section-header {
        background: #34495e;
        color: white;
        padding: 20px;
        font-size: 1.3em;
        font-weight: bold;
      }

      .section-content {
        padding: 20px;
      }

      .test-suite {
        border: 1px solid #ecf0f1;
        border-radius: 5px;
        margin-bottom: 15px;
        overflow: hidden;
      }

      .test-suite-header {
        padding: 15px;
        background: #f8f9fa;
        border-bottom: 1px solid #ecf0f1;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .test-suite-header h4 {
        color: #2c3e50;
      }

      .status {
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.8em;
        font-weight: bold;
        text-transform: uppercase;
      }

      .status.passed {
        background: #d5f4e6;
        color: #27ae60;
      }

      .status.failed {
        background: #fadbd8;
        color: #e74c3c;
      }

      .status.skipped {
        background: #fdeaa7;
        color: #f39c12;
      }

      .test-list {
        padding: 15px;
      }

      .test-item {
        padding: 10px;
        border-left: 3px solid #ecf0f1;
        margin-bottom: 10px;
        background: #fafafa;
      }

      .test-item.passed {
        border-left-color: #27ae60;
        background: #f8fff9;
      }

      .test-item.failed {
        border-left-color: #e74c3c;
        background: #fff8f8;
      }

      .progress-bar {
        background: #ecf0f1;
        border-radius: 10px;
        overflow: hidden;
        height: 20px;
        margin: 10px 0;
      }

      .progress-fill {
        height: 100%;
        background: #27ae60;
        transition: width 0.3s ease;
      }

      .grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
      }

      .chart-container {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }

      .error-list {
        background: #fff5f5;
        border: 1px solid #fed7d7;
        border-radius: 5px;
        padding: 15px;
        margin: 10px 0;
      }

      .error-item {
        padding: 10px;
        border-bottom: 1px solid #fed7d7;
        color: #c53030;
      }

      .error-item:last-child {
        border-bottom: none;
      }

      .recommendation-list {
        background: #f7fafc;
        border: 1px solid #e2e8f0;
        border-radius: 5px;
        padding: 15px;
        margin: 10px 0;
      }

      .recommendation-item {
        padding: 8px 0;
        border-bottom: 1px solid #e2e8f0;
        color: #4a5568;
      }

      .recommendation-item:last-child {
        border-bottom: none;
      }

      .recommendation-item:before {
        content: "💡 ";
        margin-right: 5px;
      }

      .footer {
        text-align: center;
        padding: 20px;
        color: #7f8c8d;
        font-size: 0.9em;
      }

      @media (max-width: 768px) {
        .container {
          padding: 10px;
        }
        
        .summary {
          grid-template-columns: 1fr;
        }
        
        .grid {
          grid-template-columns: 1fr;
        }
      }
    `;
  }

  private getReportScripts(): string {
    return `
      // Add interactive functionality
      document.addEventListener('DOMContentLoaded', function() {
        // Add click handlers for collapsible sections
        const testSuites = document.querySelectorAll('.test-suite-header');
        testSuites.forEach(header => {
          header.style.cursor = 'pointer';
          header.addEventListener('click', function() {
            const content = this.nextElementSibling;
            if (content) {
              content.style.display = content.style.display === 'none' ? 'block' : 'none';
            }
          });
        });

        // Add tooltips for charts
        const progressBars = document.querySelectorAll('.progress-bar');
        progressBars.forEach(bar => {
          bar.addEventListener('mouseover', function() {
            const fill = this.querySelector('.progress-fill');
            if (fill) {
              const percentage = fill.style.width;
              this.title = \`Progress: \${percentage}\`;
            }
          });
        });
      });
    `;
  }

  private generateHeader(report: ProjectManagementTestReport): string {
    return `
      <div class="header">
        <h1>🚀 ASTRAL_NOTES</h1>
        <h2>Project Management Test Report</h2>
        <p class="subtitle">Generated on ${new Date(report.timestamp).toLocaleString()}</p>
      </div>
    `;
  }

  private generateSummary(report: ProjectManagementTestReport): string {
    const passRate = ((report.summary.passed / report.summary.totalTests) * 100).toFixed(1);
    const duration = (report.summary.duration / 1000).toFixed(2);

    return `
      <div class="summary">
        <div class="summary-card ${report.summary.overallStatus}">
          <h3>Overall Status</h3>
          <div class="value">${report.summary.overallStatus.toUpperCase()}</div>
        </div>
        <div class="summary-card">
          <h3>Total Tests</h3>
          <div class="value">${report.summary.totalTests}</div>
        </div>
        <div class="summary-card passed">
          <h3>Passed</h3>
          <div class="value">${report.summary.passed}</div>
        </div>
        <div class="summary-card failed">
          <h3>Failed</h3>
          <div class="value">${report.summary.failed}</div>
        </div>
        <div class="summary-card">
          <h3>Pass Rate</h3>
          <div class="value">${passRate}%</div>
        </div>
        <div class="summary-card">
          <h3>Duration</h3>
          <div class="value">${duration}s</div>
        </div>
      </div>
    `;
  }

  private generateSuitesSection(report: ProjectManagementTestReport): string {
    const suitesHtml = report.suites.map(suite => this.generateSuiteHTML(suite)).join('');
    
    return `
      <div class="section">
        <div class="section-header">🧪 Test Suites</div>
        <div class="section-content">
          ${suitesHtml}
        </div>
      </div>
    `;
  }

  private generateSuiteHTML(suite: TestSuiteResult): string {
    const duration = (suite.duration / 1000).toFixed(2);
    const testsHtml = suite.tests.map(test => this.generateTestHTML(test)).join('');
    
    return `
      <div class="test-suite">
        <div class="test-suite-header">
          <div>
            <h4>${suite.name}</h4>
            <small>${suite.tests.length} tests • ${duration}s</small>
          </div>
          <span class="status ${suite.status}">${suite.status}</span>
        </div>
        <div class="test-list">
          ${testsHtml}
          ${suite.errors.length > 0 ? this.generateErrorsHTML(suite.errors) : ''}
        </div>
      </div>
    `;
  }

  private generateTestHTML(test: TestResult): string {
    const duration = test.duration.toFixed(2);
    
    return `
      <div class="test-item ${test.status}">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <div>
            <strong>${test.name}</strong>
            <div style="font-size: 0.9em; color: #666;">${test.description}</div>
          </div>
          <div style="text-align: right;">
            <div>${duration}ms</div>
            <div style="font-size: 0.8em; color: #666;">${test.assertions} assertions</div>
          </div>
        </div>
        ${test.error ? `<div style="color: #e74c3c; margin-top: 10px; font-size: 0.9em;">${test.error}</div>` : ''}
      </div>
    `;
  }

  private generateCoverageSection(report: ProjectManagementTestReport): string {
    return `
      <div class="section">
        <div class="section-header">📈 Code Coverage</div>
        <div class="section-content">
          <div class="grid">
            <div>
              <h4>Overall Coverage: ${report.coverage.overall.toFixed(1)}%</h4>
              <div class="progress-bar">
                <div class="progress-fill" style="width: ${report.coverage.overall}%"></div>
              </div>
              
              <h4>Functions: ${report.coverage.functions.toFixed(1)}%</h4>
              <div class="progress-bar">
                <div class="progress-fill" style="width: ${report.coverage.functions}%"></div>
              </div>
              
              <h4>Lines: ${report.coverage.lines.toFixed(1)}%</h4>
              <div class="progress-bar">
                <div class="progress-fill" style="width: ${report.coverage.lines}%"></div>
              </div>
              
              <h4>Branches: ${report.coverage.branches.toFixed(1)}%</h4>
              <div class="progress-bar">
                <div class="progress-fill" style="width: ${report.coverage.branches}%"></div>
              </div>
            </div>
            <div>
              ${report.coverage.uncoveredLines.length > 0 ? `
                <h4>Uncovered Lines</h4>
                <ul>
                  ${report.coverage.uncoveredLines.map(line => `<li>${line}</li>`).join('')}
                </ul>
              ` : ''}
              ${report.coverage.uncoveredFunctions.length > 0 ? `
                <h4>Uncovered Functions</h4>
                <ul>
                  ${report.coverage.uncoveredFunctions.map(func => `<li>${func}</li>`).join('')}
                </ul>
              ` : ''}
            </div>
          </div>
        </div>
      </div>
    `;
  }

  private generatePerformanceSection(report: ProjectManagementTestReport): string {
    return `
      <div class="section">
        <div class="section-header">⚡ Performance Metrics</div>
        <div class="section-content">
          <div class="grid">
            <div class="chart-container">
              <h4>Test Performance</h4>
              <p><strong>Average Duration:</strong> ${report.performance.averageTestDuration.toFixed(2)}ms</p>
              <p><strong>Slowest Test:</strong> ${report.performance.slowestTest}</p>
              <p><strong>Memory Usage:</strong> ${report.performance.memoryUsage.toFixed(1)}MB</p>
              <p><strong>CPU Usage:</strong> ${report.performance.cpuUsage.toFixed(1)}%</p>
            </div>
            <div class="chart-container">
              <h4>System Resources</h4>
              <p><strong>Storage Operations:</strong> ${report.performance.storageOperations}</p>
              <p><strong>Peak Memory:</strong> ${report.performance.memoryUsage.toFixed(1)}MB</p>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  private generateIssuesSection(report: ProjectManagementTestReport): string {
    const criticalErrors = report.issues.criticalErrors;
    const warnings = report.issues.warnings;
    
    if (criticalErrors.length === 0 && warnings.length === 0) {
      return `
        <div class="section">
          <div class="section-header">✅ Issues</div>
          <div class="section-content">
            <p style="color: #27ae60; font-weight: bold;">No critical issues found!</p>
          </div>
        </div>
      `;
    }

    return `
      <div class="section">
        <div class="section-header">⚠️ Issues</div>
        <div class="section-content">
          ${criticalErrors.length > 0 ? `
            <h4>Critical Errors</h4>
            ${this.generateErrorsHTML(criticalErrors)}
          ` : ''}
          ${warnings.length > 0 ? `
            <h4>Warnings</h4>
            <div class="error-list">
              ${warnings.map(warning => `<div class="error-item">${warning}</div>`).join('')}
            </div>
          ` : ''}
        </div>
      </div>
    `;
  }

  private generateDataIntegritySection(report: ProjectManagementTestReport): string {
    return `
      <div class="section">
        <div class="section-header">🔒 Data Integrity</div>
        <div class="section-content">
          <p><strong>Status:</strong> <span class="status ${report.dataIntegrity.status}">${report.dataIntegrity.status}</span></p>
          <p><strong>Orphaned Records:</strong> ${report.dataIntegrity.orphanedRecords}</p>
          
          <h4>Integrity Checks</h4>
          ${report.dataIntegrity.checks.map(check => `
            <div class="test-item ${check.status}">
              <strong>${check.name}</strong>: ${check.message}
            </div>
          `).join('')}
          
          ${report.dataIntegrity.inconsistencies.length > 0 ? `
            <h4>Inconsistencies</h4>
            ${report.dataIntegrity.inconsistencies.map(inc => `
              <div class="error-item">
                <strong>${inc.type}:</strong> ${inc.description}
                <br><small>Affected: ${inc.affected.join(', ')}</small>
              </div>
            `).join('')}
          ` : ''}
        </div>
      </div>
    `;
  }

  private generateCompatibilitySection(report: ProjectManagementTestReport): string {
    return `
      <div class="section">
        <div class="section-header">🌐 Compatibility</div>
        <div class="section-content">
          <div class="grid">
            <div>
              <h4>Browser APIs</h4>
              <p>localStorage: ${report.compatibility.browser.localStorage ? '✅' : '❌'}</p>
              <p>IndexedDB: ${report.compatibility.browser.indexedDB ? '✅' : '❌'}</p>
              <p>Web Workers: ${report.compatibility.browser.webWorkers ? '✅' : '❌'}</p>
              <p>Service Workers: ${report.compatibility.browser.serviceWorkers ? '✅' : '❌'}</p>
              <p>ES6 Support: ${report.compatibility.browser.es6Support ? '✅' : '❌'}</p>
            </div>
            <div>
              <h4>Storage</h4>
              <p>localStorage Quota: ${(report.compatibility.storage.localStorageQuota / 1024).toFixed(1)}KB</p>
              <p>IndexedDB Quota: ${(report.compatibility.storage.indexedDBQuota / 1024 / 1024).toFixed(1)}MB</p>
              <p>Compression: ${report.compatibility.storage.compressionSupport ? '✅' : '❌'}</p>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  private generateRecommendationsSection(report: ProjectManagementTestReport): string {
    if (report.issues.recommendations.length === 0) {
      return '';
    }

    return `
      <div class="section">
        <div class="section-header">💡 Recommendations</div>
        <div class="section-content">
          <div class="recommendation-list">
            ${report.issues.recommendations.map(rec => 
              `<div class="recommendation-item">${rec}</div>`
            ).join('')}
          </div>
        </div>
      </div>
    `;
  }

  private generateFooter(report: ProjectManagementTestReport): string {
    return `
      <div class="footer">
        <p>Generated by ASTRAL_NOTES Test Suite • ${new Date(report.timestamp).toLocaleString()}</p>
        <p>Environment: ${report.environment.testFramework} on ${report.environment.platform}</p>
      </div>
    `;
  }

  private generateErrorsHTML(errors: TestError[]): string {
    if (errors.length === 0) return '';
    
    return `
      <div class="error-list">
        ${errors.map(error => `
          <div class="error-item">
            <strong>${error.test}</strong>: ${error.message}
            ${error.stack ? `<pre style="font-size: 0.8em; margin-top: 5px;">${error.stack}</pre>` : ''}
          </div>
        `).join('')}
      </div>
    `;
  }

  // Markdown generation methods

  private generateSummaryMarkdown(report: ProjectManagementTestReport): string {
    const passRate = ((report.summary.passed / report.summary.totalTests) * 100).toFixed(1);
    const duration = (report.summary.duration / 1000).toFixed(2);

    return `
| Metric | Value |
|--------|-------|
| **Overall Status** | ${report.summary.overallStatus.toUpperCase()} |
| **Total Tests** | ${report.summary.totalTests} |
| **Passed** | ${report.summary.passed} |
| **Failed** | ${report.summary.failed} |
| **Skipped** | ${report.summary.skipped} |
| **Pass Rate** | ${passRate}% |
| **Duration** | ${duration}s |
`;
  }

  private generateSuiteMarkdown(suite: TestSuiteResult): string {
    const duration = (suite.duration / 1000).toFixed(2);
    const status = suite.status === 'passed' ? '✅' : suite.status === 'failed' ? '❌' : '⏭️';
    
    let markdown = `### ${status} ${suite.name}\n\n`;
    markdown += `**Duration:** ${duration}s | **Tests:** ${suite.tests.length} | **Status:** ${suite.status}\n\n`;
    
    if (suite.tests.length > 0) {
      markdown += `#### Test Results\n\n`;
      suite.tests.forEach(test => {
        const testStatus = test.status === 'passed' ? '✅' : test.status === 'failed' ? '❌' : '⏭️';
        markdown += `- ${testStatus} **${test.name}** (${test.duration.toFixed(2)}ms)\n`;
        if (test.description) {
          markdown += `  - ${test.description}\n`;
        }
        if (test.error) {
          markdown += `  - ❌ Error: ${test.error}\n`;
        }
      });
      markdown += '\n';
    }

    if (suite.errors.length > 0) {
      markdown += `#### Errors\n\n`;
      suite.errors.forEach(error => {
        markdown += `- **${error.test}:** ${error.message}\n`;
      });
      markdown += '\n';
    }

    if (suite.warnings.length > 0) {
      markdown += `#### Warnings\n\n`;
      suite.warnings.forEach(warning => {
        markdown += `- ⚠️ ${warning}\n`;
      });
      markdown += '\n';
    }

    return markdown;
  }

  private generateCoverageMarkdown(report: ProjectManagementTestReport): string {
    return `
| Type | Coverage |
|------|----------|
| **Overall** | ${report.coverage.overall.toFixed(1)}% |
| **Functions** | ${report.coverage.functions.toFixed(1)}% |
| **Lines** | ${report.coverage.lines.toFixed(1)}% |
| **Branches** | ${report.coverage.branches.toFixed(1)}% |

${report.coverage.uncoveredLines.length > 0 ? `
**Uncovered Lines:**
${report.coverage.uncoveredLines.map(line => `- ${line}`).join('\n')}
` : ''}

${report.coverage.uncoveredFunctions.length > 0 ? `
**Uncovered Functions:**
${report.coverage.uncoveredFunctions.map(func => `- ${func}`).join('\n')}
` : ''}
`;
  }

  private generatePerformanceMarkdown(report: ProjectManagementTestReport): string {
    return `
| Metric | Value |
|--------|-------|
| **Average Test Duration** | ${report.performance.averageTestDuration.toFixed(2)}ms |
| **Slowest Test** | ${report.performance.slowestTest} |
| **Memory Usage** | ${report.performance.memoryUsage.toFixed(1)}MB |
| **CPU Usage** | ${report.performance.cpuUsage.toFixed(1)}% |
| **Storage Operations** | ${report.performance.storageOperations} |
`;
  }

  private generateIssuesMarkdown(report: ProjectManagementTestReport): string {
    let markdown = '';

    if (report.issues.criticalErrors.length > 0) {
      markdown += `### Critical Errors\n\n`;
      report.issues.criticalErrors.forEach(error => {
        markdown += `- **${error.test}:** ${error.message}\n`;
        if (error.stack) {
          markdown += `  \`\`\`\n  ${error.stack}\n  \`\`\`\n`;
        }
      });
      markdown += '\n';
    }

    if (report.issues.warnings.length > 0) {
      markdown += `### Warnings\n\n`;
      report.issues.warnings.forEach(warning => {
        markdown += `- ⚠️ ${warning}\n`;
      });
      markdown += '\n';
    }

    if (report.issues.recommendations.length > 0) {
      markdown += `### Recommendations\n\n`;
      report.issues.recommendations.forEach((rec, index) => {
        markdown += `${index + 1}. ${rec}\n`;
      });
    }

    return markdown;
  }

  private generateDataIntegrityMarkdown(report: ProjectManagementTestReport): string {
    const status = report.dataIntegrity.status === 'passed' ? '✅' : '❌';
    
    let markdown = `**Status:** ${status} ${report.dataIntegrity.status}\n`;
    markdown += `**Orphaned Records:** ${report.dataIntegrity.orphanedRecords}\n\n`;
    
    markdown += `### Integrity Checks\n\n`;
    report.dataIntegrity.checks.forEach(check => {
      const checkStatus = check.status === 'passed' ? '✅' : '❌';
      markdown += `- ${checkStatus} **${check.name}:** ${check.message}\n`;
    });

    if (report.dataIntegrity.inconsistencies.length > 0) {
      markdown += `\n### Inconsistencies\n\n`;
      report.dataIntegrity.inconsistencies.forEach(inc => {
        markdown += `- **${inc.type}:** ${inc.description}\n`;
        markdown += `  - Affected: ${inc.affected.join(', ')}\n`;
      });
    }

    return markdown;
  }

  private generateCompatibilityMarkdown(report: ProjectManagementTestReport): string {
    const browserStatus = report.compatibility.status === 'passed' ? '✅' : '❌';
    
    return `
**Status:** ${browserStatus} ${report.compatibility.status}

### Browser APIs

| API | Support |
|-----|---------|
| localStorage | ${report.compatibility.browser.localStorage ? '✅' : '❌'} |
| IndexedDB | ${report.compatibility.browser.indexedDB ? '✅' : '❌'} |
| Web Workers | ${report.compatibility.browser.webWorkers ? '✅' : '❌'} |
| Service Workers | ${report.compatibility.browser.serviceWorkers ? '✅' : '❌'} |
| ES6 Support | ${report.compatibility.browser.es6Support ? '✅' : '❌'} |

### Storage

| Feature | Value |
|---------|-------|
| localStorage Quota | ${(report.compatibility.storage.localStorageQuota / 1024).toFixed(1)}KB |
| IndexedDB Quota | ${(report.compatibility.storage.indexedDBQuota / 1024 / 1024).toFixed(1)}MB |
| Compression Support | ${report.compatibility.storage.compressionSupport ? '✅' : '❌'} |
| Encryption Support | ${report.compatibility.storage.encryptionSupport ? '✅' : '❌'} |
`;
  }

  private getStatusEmoji(status: string): string {
    switch (status) {
      case 'passed': return '✅';
      case 'failed': return '❌';
      case 'skipped': return '⏭️';
      case 'partial': return '⚠️';
      default: return '❓';
    }
  }

  private downloadReport(content: string, filename: string, format: string): void {
    const mimeTypes = {
      html: 'text/html',
      markdown: 'text/markdown',
      json: 'application/json'
    };

    const blob = new Blob([content], { 
      type: mimeTypes[format as keyof typeof mimeTypes] || 'text/plain' 
    });
    
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
}

// Export the main report generator function
export const generateProjectManagementTestReport = (
  report: ProjectManagementTestReport,
  format: 'html' | 'markdown' | 'json' | 'console' = 'console'
): string => {
  const generator = ProjectManagementTestReportGenerator.getInstance();
  
  switch (format) {
    case 'html':
      return generator.generateHTMLReport(report);
    case 'markdown':
      return generator.generateMarkdownReport(report);
    case 'json':
      return generator.generateJSONReport(report);
    case 'console':
      generator.generateConsoleReport(report);
      return '';
    default:
      throw new Error(`Unsupported format: ${format}`);
  }
};